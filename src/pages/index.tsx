import Head from 'next/head';
import SearchBar from '../components/SearchBar';
import Pagination from '../components/Pagination';
import React, { useEffect, useState, useCallback } from 'react';
import Table from '../components/Table';
import { addFields, UserWithAdditionalFields } from '@/utils/addFields';
import { searchHelper } from '@/utils/searchHelper';
export interface User {
  id: number;
  name: string;
  email: string;
  role: string;
  selected: boolean;

  // Add any other fields you need
}

const Home: React.FC = () => {
  const [users, setUsers] = useState<UserWithAdditionalFields[]>([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [usersPerPage] = useState(10);
  const [editUserId, setEditUserId] = useState<number | null>(null);
  const [titleCheckbox, setTitleCheckBox] = useState(false);
  const pages = 10;

  const fetchData = async () => {
    try {
      setLoading(true);

      const response = await fetch(
        'https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json'
      );

      if (!response.ok) {
        throw new Error(`Network response was not ok (${response.status})`);
      }

      const data = await response.json();
      console.log('dattaaa', data);
      setUsers(addFields(data));
      setLoading(false);

      return data;
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);
  const indexOfFirstUser = (currentPage - 1) * pages;

  const paginate = (pageNumber: number) => {
    if (pageNumber < 1) {
      setCurrentPage(1);
    } else if (pageNumber > Math.ceil(users.length / usersPerPage)) {
      setCurrentPage(Math.ceil(users.length / usersPerPage));
    } else {
      setCurrentPage(pageNumber);
    }
  };

  const saveUser = (
    id: number,
    nameRef: React.RefObject<HTMLInputElement>,
    emailRef: React.RefObject<HTMLInputElement>,
    roleRef: React.RefObject<HTMLInputElement>
  ): void => {
    let newUsers = users;
    const index = newUsers.findIndex((user) => user.id === id);

    if (nameRef.current && emailRef.current && roleRef.current) {
      newUsers[index].name = nameRef.current.value;
      newUsers[index].email = emailRef.current.value;
      newUsers[index].role = roleRef.current.value;
      setUsers(newUsers);
      setEditUserId(null);
    }
  };

  const handleDeleteClick = useCallback(
    (userId) => {
      const newUsers = users.filter((user) => user.id !== userId);
      setUsers(newUsers);
    },
    [users, setUsers]
  );

  const searchUsers = (e) => {
    let newUsers = searchHelper(e.target.value, users);
    setUsers(newUsers);
  };
  const selectRow = (id) => {
    let selectedUsers = users;
    const index = selectedUsers.findIndex((user) => user.id === id);
    selectedUsers[index].selected = !selectedUsers[index].selected;
    setUsers(selectedUsers);
  };
  const deleteSelectedUsers = () => {
    setUsers((prevState) => prevState.filter((user) => !user.selected));
    setTitleCheckBox(false);
  };
  const selectAllUsersShown = (e) => {
    console.log('onchecked', e.target.checked);
    setTitleCheckBox(e.target.checked);
    let selectedUserIds = users
      .filter((user) => user.show)
      .slice(indexOfFirstUser, indexOfFirstUser + pages)
      .map((user) => user.id);
    let newUsers = users.map((user) => {
      if (selectedUserIds.includes(user.id)) {
        console.log('userselecteddd', user.selected);
        user.selected = e.target.checked ?? e.target.value;
        return user;
      }
      return user;
    });
    setUsers(newUsers);
    console.log(newUsers);
  };
  return (
    <>
      <Head>
        <title>Admin Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/table.png" />
      </Head>
      <div className="main">
        <SearchBar searchUsers={searchUsers} />
        <Table
          users={users
            .filter((user) => user.show)
            .slice(indexOfFirstUser, indexOfFirstUser + pages)}
          loading={loading}
          saveUser={saveUser}
          editUserId={editUserId}
          setEditUserId={setEditUserId}
          handleDeleteClick={handleDeleteClick}
          selectRow={selectRow}
          selectAllUsersShown={selectAllUsersShown}
          titleCheckbox={titleCheckbox}
        />
        <Pagination
          usersPerPage={usersPerPage}
          totalUsers={users.filter((user) => user.show).length}
          paginate={paginate}
          currentPage={currentPage}
          deleteSelectedUsers={deleteSelectedUsers}
        />
      </div>
    </>
  );
};

export default Home;
